import React, { useState } from "react";
import { FaFilePdf } from "react-icons/fa";
import jsPDF from "jspdf";
import "../../styles/pdf.css";

interface RecipePDFProps {
  recipe: {
    id: number;
    title: string;
    prep_time: string;
    cook_time: string;
    servings: string;
    ingredients: Array<{ original: string }>;
    instructions: string[];
    nutritional_info: string[];
  };
}

const RecipePDF: React.FC<RecipePDFProps> = ({ recipe }) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    try {
      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      // Set initial cursor position
      let yPos = 40; // Start after header
      const margin = 20;
      const pageWidth = pdf.internal.pageSize.width;
      const contentWidth = pageWidth - 2 * margin;

      // Helper function for text
      const addText = (
        text: string,
        size: number = 12,
        isBold: boolean = false,
        color = "#333333"
      ) => {
        pdf.setFontSize(size);
        pdf.setFont("helvetica", isBold ? "bold" : "normal");
        pdf.setTextColor(color);

        if (yPos > pdf.internal.pageSize.height - 40) {
          pdf.addPage();
          yPos = 40;
        }

        const lines = pdf.splitTextToSize(text, contentWidth);
        pdf.text(lines, margin, yPos);
        yPos += lines.length * size * 0.3527 + 5;
      };

      // Header with MealSphere branding
      pdf.setFillColor(5, 71, 42);
      pdf.rect(0, 0, pageWidth, 30, "F");

      // Add logo on the left
      const logoSize = 25;
      pdf.addImage(
        "/MealPilot-icon-transparent.png",
        "PNG",
        margin,
        2.5,
        logoSize,
        logoSize
      );

      // MealSphere text
      pdf.setTextColor(255);
      pdf.setFontSize(24);
      pdf.setFont("helvetica", "bold");
      pdf.text("MealSphere", pageWidth / 2 - 20, 20);

      // Title
      addText(recipe.title, 28, true, "#05472A");

      // Meta information
      pdf.setFillColor(248, 249, 250);
      pdf.roundedRect(margin - 1, yPos - 7, contentWidth, 12, 3, 3, "F");

      //Prep Time: ${recipe.prep_time} | Cook Time: ${recipe.cook_time} |

      const metaInfo = `Servings: ${recipe.servings}`;
      addText(metaInfo, 12);
      yPos += 5;

      // Divider
      pdf.setDrawColor(5, 71, 42);
      pdf.setLineWidth(0.5);
      pdf.line(margin, yPos, pageWidth - margin, yPos);
      yPos += 15;

      // Ingredients
      addText("Ingredients", 20, true, "#05472A");
      recipe.ingredients.forEach((ingredient) => {
        addText(`â€¢ ${ingredient.original}`, 12);
      });
      yPos += 5;

      // Instructions
      addText("Instructions", 20, true, "#05472A");
      let stepNumber = 1;
      recipe.instructions.forEach((instruction) => {
        if (instruction.startsWith("**") && instruction.endsWith("**")) {
          addText(`${stepNumber}. ${instruction.slice(2, -2)}`, 12, true);
          stepNumber++;
        } else {
          addText(` ${instruction}`, 12);
        }
      });
      yPos += 5;

      // Nutritional Information
      // if (recipe.nutritional_info?.length > 0) {
      //   addText("Nutritional Information", 20, true, "#05472A");

      //   // Grid layout for nutritional info
      //   const numColumns = 2;
      //   const itemHeight = 12;
      //   const itemSpacing = 5;

      //   for (let i = 0; i < recipe.nutritional_info.length; i++) {
      //     const xPos = margin + (i % numColumns) * (contentWidth / numColumns);
      //     // Check if we need a new page for nutritional info
      //     if (yPos > pdf.internal.pageSize.height - 60) {
      //       pdf.addPage();
      //       yPos = 40;
      //     }
      //     const itemY =
      //       yPos + Math.floor(i / numColumns) * (itemHeight + itemSpacing);

      //     // Green background for each item
      //     pdf.setFillColor(5, 71, 42);
      //     pdf.roundedRect(
      //       xPos,
      //       itemY - 5,
      //       contentWidth / numColumns - 5,
      //       itemHeight,
      //       2,
      //       2,
      //       "F"
      //     );

      //     // White text
      //     pdf.setTextColor(255);
      //     pdf.text(recipe.nutritional_info[i], xPos + 5, itemY + 3);
      //   }

      //   yPos +=
      //     Math.ceil(recipe.nutritional_info.length / numColumns) *
      //       (itemHeight + itemSpacing) +
      //     10;
      // }

      // Footer with green background and white text
      const footerText = "Generated by MealSphere";
      const footerHeight = 20;
      const pageHeight = pdf.internal.pageSize.height;

      // Add green background - extend all the way to bottom of page
      pdf.setFillColor(5, 71, 42);
      pdf.rect(0, pageHeight - footerHeight, pageWidth, footerHeight, "F");

      // Add white text
      pdf.setFontSize(10);
      pdf.setTextColor(255); // White text
      const footerWidth = pdf.getTextWidth(footerText);
      pdf.text(
        footerText,
        (pageWidth - footerWidth) / 2,
        pageHeight - footerHeight / 2
      );

      // Save PDF
      const filename = `${recipe.title.toLowerCase().replace(/\s+/g, "-")}.pdf`;
      pdf.save(filename);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      onClick={generatePDF}
      disabled={isGenerating}
      className={`pdf-download-button ${isGenerating ? "generating" : ""}`}>
      <FaFilePdf />
      {isGenerating ? "Generating PDF..." : "Save as PDF"}
    </button>
  );
};

export default RecipePDF;
